#!/bin/bash

# Create commit message from staged changes using Claude Code
# Opens in vim for editing, commits if saved, aborts if cancelled

# Check if there are any staged changes before running Claude
if git diff --staged --quiet; then
    echo "No staged changes to commit"
    exit 1
fi

# Write staged diff to file for Claude to read
git diff --staged > diff.txt

# Set original directory for Claude hooks
export CLAUDE_ORIGINAL_DIR="$PWD"

# Run claude to generate commit message, filter to show only text output
claude --dangerously-skip-permissions -p '/cc-msg' --model haiku --verbose --output-format stream-json | ~/.zsh/scripts/claude-stream-filter

# Check if commit.md was created and has content
if [ ! -f commit.md ]; then
    echo ""
    echo "No commit message generated. Are there staged changes?"
    rm -f diff.txt
    exit 1
fi

if [ ! -s commit.md ]; then
    echo ""
    echo "No staged changes to commit"
    rm -f commit.md diff.txt
    exit 1
fi

echo ""
echo "Opening commit message in vim..."
echo "Save and quit (:wq) to commit, or quit without saving (:q!) to abort"
echo ""

# Store the file's modification time before opening vim
original_mtime=$(stat -f %m commit.md 2>/dev/null)

# Open commit message in vim for editing
vim commit.md

# Check if file still exists
if [ ! -f commit.md ]; then
    echo "Commit aborted (file deleted)"
    rm -f diff.txt
    exit 1
fi

# Check if file was modified (saved)
new_mtime=$(stat -f %m commit.md 2>/dev/null)
if [ "$original_mtime" = "$new_mtime" ]; then
    echo "Commit aborted (no changes saved)"
    rm -f commit.md diff.txt
    exit 1
fi

# Check if file has content
if [ ! -s commit.md ]; then
    echo "Commit aborted (empty message)"
    rm -f commit.md diff.txt
    exit 1
fi

# Create the commit using the message from the file
git commit -F commit.md

# Check if commit was successful
if [ $? -eq 0 ]; then
    echo "✓ Commit successful"
else
    echo "✗ Commit failed"
    rm -f commit.md diff.txt
    exit 1
fi

# Clean up
rm commit.md diff.txt
